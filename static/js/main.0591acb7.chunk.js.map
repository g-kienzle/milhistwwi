{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["RNG","props","state","number","stop","this","setState","getRandomInt","interval","setInterval","time","Date","now","clearInterval","className","style","margin","textAlign","Card","Header","Body","ButtonGroup","Button","marginLeft","variant","onClick","spin","marginRight","Component","Unit","buttonClick","n","parentCallback","bind","list","choices","t","border","CardDeck","heading","body","rng","CardGroup","padding","length","map","item","index","min","max","Math","floor","random","App","switchUnit","unit","current","reset","defaultstate","Object","assign","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0591acb7.chunk.js","sourcesContent":["\nimport React, { Component } from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { FormControl, InputGroup, Button, ListGroup, Accordion, Card, ButtonGroup, CardGroup, CardDeck } from 'react-bootstrap';\n\nclass RNG extends Component {\n  constructor(props){\n    super(props)\n\n    this.state={\n      number:\"---\",\n      stop:true,\n\n    }\n  }\n  spin(){\n    this.setState({stop:false});\n    this.setState({number:getRandomInt(1,100)})\n  }\n  stop(){\n    this.setState({stop:true});\n  }\n  componentDidMount() {\n    this.interval = setInterval(() => this.setState({ time: Date.now() }), 100);\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n  render(){\n    return (\n      <div className=\"RNG\" \n        style={{\n          margin: \"20px\",\n          textAlign:\"center\",\n          \n        }}\n      >\n        <Card>\n          <Card.Header><h1>\n            {this.state.stop?this.state.number:getRandomInt(1,100)}\n          </h1></Card.Header>\n          <Card.Body>\n            <ButtonGroup>\n              <Button\n                style={{marginLeft: \"20px\"}}\n                variant='outline-success'\n                onClick={() => this.spin()}\n              >\n                Spin\n              </Button>\n              <Button\n                style={{marginRight: \"20px\"}}\n                variant='outline-danger'\n                onClick={() => this.stop()}\n              >\n                Stop\n              </Button>\n            </ButtonGroup>\n          </Card.Body>\n        </Card>\n      </div>\n    )\n  }\n}\n\nclass Unit extends Component {\n  constructor(props){\n    super(props);\n    \n    \n    this.buttonClick = this.buttonClick.bind(this)\n  }\n  \n  buttonClick = (n) => {\n    this.props.parentCallback(n);\n\n  }\n\n  render() {\n    const list = [...this.props.choices];\n    let t = this\n    return (\n      <div className=\"Unit\">\n        <div\n          style={{\n            border: \"2px solid\",\n            margin: \"20px\"\n          }}\n        >\n          <CardDeck style={{margin: \"20px\"}}>\n            <Card>\n              <Card.Header><h1 style={{marginLeft: \"20px\"}}>{this.props.heading}</h1></Card.Header>\n              <Card.Body><p style={{marginLeft: \"20px\"}}>{this.props.body}</p></Card.Body>\n            </Card>\n            {this.props.rng?<RNG/>:null}\n          </CardDeck>\n          <CardGroup style={{margin: \"20px\", padding:\"20px\"}}>\n            {list[0].length>=1?list.map(function(item, index){\n                      return <Card>\n                            <Card.Body><h3>{item[2]}</h3></Card.Body>\n                            <Button \n                                variant='outline-primary'\n                                onClick={() => {t.buttonClick(item[1])\n                                }}\n                            >\n                            \n                            {item[0]}\n                            </Button></Card>;\n                  \n                    }\n                    ):null\n            }\n          </CardGroup>\n        <br/>\n        </div>\n        \n      </div>\n    )\n  }\n}\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n\n    this.defaultstate={\n      current: <Unit \n        parentCallback={this.switchUnit}\n        heading=\"World War 1 Simulation\" \n        body=\"What follows is a simulation of WW1 France. You will take the role of a Captain in the American Army in September 1918. You are in command of a company of infantry. You lead 256 men in four platoons of infantry and a fifth platoon with three machine gunners and their crews. (The machine guns are heavy but can be carried). Your unit is made up of African Americans.  President Wilson tried hard to keep America out of the war and he refused to allow the Army to equip for it before we entered the war. Therefore, like many African American units you are actually fighting wearing French Uniforms and with mostly French equipment.  You are about to go into battle for the first time. 4 months ago you were working a job but because of your college education you were given a command.\" \n        rng={false}\n        choices={\n          [\n          [\"Orders\",<Unit \n            parentCallback={this.switchUnit}\n            heading=\"The Orders\" \n            body=\"Your orders are to capture the above German Concrete Bunker which houses two machine guns. The bunker is part of the second or main line of German trenches. To get to it you must cross 700 yards of muddy shell holed no man's land, get through a web or “belt” of barbed wire that is 30 feet across, then drive the Germans from the first (front line trench). Finally you take the second trench line and the bunker (your objective). You are to hold this locally important bunker and wait for the follow up Battalion to reinforce you, or if the opportunity exists try to punch through the next German line and the one that follows that one. But your objective is to seize and hold the bunker. The French failed to take this very same bunker in June 1916.\" \n            rng={true}\n            choices={\n              [\n              ['To First Decision',<Unit \n                parentCallback={this.switchUnit}\n                heading=\"Use of Artillery\" \n                body=\"Your Lt. Col. (commanding officer) gave you no detailed directions. It is up to you to figure out how to take the bunker. Your first decision is how do you use artillery? Read each option and click on the one you choose. You have a French advisor who fought here in 1916. You have three choices and some advice.\" \n                choices={[\n                  [\"Long Bombardment\",<Unit\n                    parentCallback={this.reset}\n                    heading=\"selected 1\"\n                    body=\"1\"\n                    choices={[[\"All done\"]]}/>,\n                  \"Your American training and the recommendation of your French advisor would suggest that you use a massive 12 hour bombardment designed to obliterate the German lines and to use mustard and chlorine gas to kill as many Germans as possible. The problem is that this makes it clear where you will attack.\"],\n                  [\"Limited Bombardment\",<Unit\n                    parentCallback={this.reset}\n                    heading=\"selected 2\"\n                    body=\"2\"\n                    choices={[[\"All done\"]]}/>,\n                  \"You could also decide to use a lot of guns for just a few minutes. This should cause problems and German losses in the front two trenches as well as cutting wire but not give Germans the chance to reinforce this position.\"],\n                  [\"Sneak Across\",<Unit\n                  parentCallback={this.reset}\n                  heading=\"selected 3\"\n                  body=\"3\"\n                  choices={[[\"All done\"]]}/>,\"Your longest serving soldier who fought natives 30 years ago suggests not using artillery and to try to sneak across no mans land.\"]]}/>,\"Click This Link to make your first decision\"]\n              ]\n              \n            }/>, \"Follow the link to learn your orders\"]\n          ]\n        }\n      />\n        \n    };\n    this.state = Object.assign({}, this.defaultstate);\n\n    this.switchUnit = this.switchUnit.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n\n  \n  \n\n  switchUnit = (unit) =>{\n    this.setState({current:unit});\n  }\n\n  reset = () =>{\n    this.setState(this.defaultstate);\n  }\n\n  \n\n  render() {\n    let t = {}\n    t = Object.assign(t,this.state.current);\n    console.log(t)\n    return (\n      <div className=\"App\">\n        <div>\n        {t}\n        </div>\n\n      </div>\n    )\n  }\n}\n\nfunction getRandomInt (min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n//var element = React.createElement('h1', { className: 'greeting' }, 'Hello, world!');\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}